<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>csharp on KASUSA</title>
    <link>https://kasusa.github.io/hugo/tags/csharp/</link>
    <description>Recent content in csharp on KASUSA</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 02 Jun 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://kasusa.github.io/hugo/tags/csharp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>c#打开指定文件夹和选定文件</title>
      <link>https://kasusa.github.io/hugo/post/csharp%E6%89%93%E5%BC%80%E6%8C%87%E5%AE%9A%E6%96%87%E4%BB%B6%E5%A4%B9%E5%92%8C%E9%80%89%E5%AE%9A%E6%96%87%E4%BB%B6/</link>
      <pubDate>Wed, 02 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://kasusa.github.io/hugo/post/csharp%E6%89%93%E5%BC%80%E6%8C%87%E5%AE%9A%E6%96%87%E4%BB%B6%E5%A4%B9%E5%92%8C%E9%80%89%E5%AE%9A%E6%96%87%E4%BB%B6/</guid>
      <description>private void openExplorer() { string FilePath = Directory.GetCurrentDirectory(); //打开文件夹并选中文件  System.Diagnostics.Process.Start(&amp;#34;Explorer&amp;#34;, &amp;#34;/select,&amp;#34; + FilePath + &amp;#34;\\&amp;#34; + &amp;#34;infolist.xml&amp;#34;); //仅打开文件夹  System.Diagnostics.Process.Start(FilePath); } </description>
      <content>&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; openExplorer()
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; FilePath = Directory.GetCurrentDirectory();
  &lt;span style=&#34;color:#75715e&#34;&gt;//打开文件夹并选中文件
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  System.Diagnostics.Process.Start(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Explorer&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/select,&amp;#34;&lt;/span&gt; + FilePath + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\\&amp;#34;&lt;/span&gt; + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;infolist.xml&amp;#34;&lt;/span&gt;); 
  &lt;span style=&#34;color:#75715e&#34;&gt;//仅打开文件夹
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  System.Diagnostics.Process.Start(FilePath);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
    <item>
      <title>winform适配dpi</title>
      <link>https://kasusa.github.io/hugo/post/winform%E9%80%82%E9%85%8Ddpi/</link>
      <pubDate>Wed, 02 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://kasusa.github.io/hugo/post/winform%E9%80%82%E9%85%8Ddpi/</guid>
      <description>https://zhuanlan.zhihu.com/p/128588859
在项目中添加一个：应用程序清单文件
在清单文件app.manifest的 &amp;lt;/assembly&amp;gt; 标签下添加
&amp;lt;application xmlns=&amp;#34;urn:schemas-microsoft-com:asm.v3&amp;#34;&amp;gt; &amp;lt;windowsSettings&amp;gt; &amp;lt;dpiAware xmlns=&amp;#34;http://schemas.microsoft.com/SMI/2005/WindowsSettings&amp;#34;&amp;gt;true&amp;lt;/dpiAware&amp;gt; &amp;lt;/windowsSettings&amp;gt; &amp;lt;/application&amp;gt; 适配DPI之后，即便是电脑dpi为缩放的情况下， 仍然可以清晰的显示文字。</description>
      <content>&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/128588859&#34;&gt;https://zhuanlan.zhihu.com/p/128588859&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在项目中添加一个：&lt;strong&gt;应用程序清单文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在清单文件&lt;code&gt;app.manifest&lt;/code&gt;的 &lt;code&gt;&amp;lt;/assembly&amp;gt;&lt;/code&gt; 标签下添加&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;application&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;urn:schemas-microsoft-com:asm.v3&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;windowsSettings&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dpiAware&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://schemas.microsoft.com/SMI/2005/WindowsSettings&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;true&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dpiAware&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/windowsSettings&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/application&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;适配DPI之后，即便是电脑dpi为缩放的情况下， 仍然可以清晰的显示文字。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>归档辅助小程序</title>
      <link>https://kasusa.github.io/hugo/post/%E5%BD%92%E6%A1%A3%E8%BE%85%E5%8A%A9%E5%B0%8F%E7%A8%8B%E5%BA%8F/</link>
      <pubDate>Wed, 02 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://kasusa.github.io/hugo/post/%E5%BD%92%E6%A1%A3%E8%BE%85%E5%8A%A9%E5%B0%8F%E7%A8%8B%E5%BA%8F/</guid>
      <description>最近写了一个工作用的小程序：
然后从开始写到现在大概花了5小时左右。用到了系统剪切板、listbox、object序列化并存储为xml、打开指定文件夹并选中指定文件。还有就是一些winform上的设计。
你可以看到右下角的按钮，我感觉把那几个按钮摆在那个位置真的是太天才了，而且那些个按钮都是emoji，并没有用图片，整个程序仍然很小巧。</description>
      <content>&lt;p&gt;最近写了一个工作用的小程序：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax4.sinaimg.cn/large/0083vuQJgy1gr3yqkjymlj30mg0blt9a.jpg&#34; alt=&#34;s&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后从开始写到现在大概花了5小时左右。用到了系统剪切板、listbox、object序列化并存储为xml、打开指定文件夹并选中指定文件。还有就是一些winform上的设计。&lt;/p&gt;
&lt;p&gt;你可以看到右下角的按钮，我感觉把那几个按钮摆在那个位置真的是太天才了，而且那些个按钮都是emoji，并没有用图片，整个程序仍然很小巧。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>linkedlist删除指定值</title>
      <link>https://kasusa.github.io/hugo/post/linkedlist%E5%88%A0%E9%99%A4%E6%8C%87%E5%AE%9A%E5%80%BC/</link>
      <pubDate>Tue, 01 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://kasusa.github.io/hugo/post/linkedlist%E5%88%A0%E9%99%A4%E6%8C%87%E5%AE%9A%E5%80%BC/</guid>
      <description>info是我自己定义的一个类。
下面是如何删除linklist中指定item的办法。
LinkedList&amp;lt;info&amp;gt; infolist = new LinkedList&amp;lt;info&amp;gt;(); string todelete = &amp;#34;1&amp;#34;; info tmpitem = new info(); foreach (var item in infolist) { if (item.no == todelete) tmpitem = item; } infolist.Remove(tmpitem); </description>
      <content>&lt;p&gt;info是我自己定义的一个类。&lt;/p&gt;
&lt;p&gt;下面是如何删除linklist中指定item的办法。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;LinkedList&amp;lt;info&amp;gt; infolist = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; LinkedList&amp;lt;info&amp;gt;();

&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; todelete = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;;

info tmpitem = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; info();
&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; item &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; infolist)
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (item.no == todelete)
        tmpitem = item;
}
infolist.Remove(tmpitem);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
    <item>
      <title>保存object到xml</title>
      <link>https://kasusa.github.io/hugo/post/%E4%BF%9D%E5%AD%98%E4%BB%BB%E6%84%8Fobject%E5%88%B0%E6%96%87%E4%BB%B6/</link>
      <pubDate>Tue, 01 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://kasusa.github.io/hugo/post/%E4%BF%9D%E5%AD%98%E4%BB%BB%E6%84%8Fobject%E5%88%B0%E6%96%87%E4%BB%B6/</guid>
      <description>对实体类做标记  [DataContract] 标记在class前。
 [DataMember] 标记在需要保存的属性前。
[DataContract] public class Car { [DataMember] public string name; [DataMember] double power; [DataMember] List&amp;lt;Wheel&amp;gt; wheels; } 拷贝这两个函数 保存：保存文件到xml，文件目录和程序目录相同，文件名自定。
读取：从指定文件名读取。
static void SaveViaDataContractSerialization&amp;lt;T&amp;gt;(T serializableObject, string filepath) { var serializer = new DataContractSerializer(typeof(T)); var settings = new XmlWriterSettings() { Indent = true, IndentChars = &amp;#34;\t&amp;#34;, }; var writer = XmlWriter.Create(filepath, settings); serializer.WriteObject(writer, serializableObject); writer.Close(); } static T LoadViaDataContractSerialization&amp;lt;T&amp;gt;(string filepath) { var fileStream = new FileStream(filepath, FileMode.</description>
      <content>&lt;h2 id=&#34;对实体类做标记&#34;&gt;对实体类做标记&lt;/h2&gt;
&lt;p&gt;&lt;code&gt; [DataContract]&lt;/code&gt; 标记在class前。&lt;/p&gt;
&lt;p&gt;&lt;code&gt; [DataMember]&lt;/code&gt; 标记在需要保存的属性前。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt; [DataContract]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Car&lt;/span&gt;
{
&lt;span style=&#34;color:#a6e22e&#34;&gt;  [DataMember]&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; name;
&lt;span style=&#34;color:#a6e22e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;  [DataMember]&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; power;
&lt;span style=&#34;color:#a6e22e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;  [DataMember]&lt;/span&gt;
  List&amp;lt;Wheel&amp;gt; wheels;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;拷贝这两个函数&#34;&gt;拷贝这两个函数&lt;/h2&gt;
&lt;p&gt;保存：保存文件到xml，文件目录和程序目录相同，文件名自定。&lt;/p&gt;
&lt;p&gt;读取：从指定文件名读取。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; SaveViaDataContractSerialization&amp;lt;T&amp;gt;(T serializableObject, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; filepath)
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; serializer = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DataContractSerializer(&lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(T));
  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; settings = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; XmlWriterSettings()
  {
    Indent = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;,
    IndentChars = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\t&amp;#34;&lt;/span&gt;,
  };
  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; writer = XmlWriter.Create(filepath, settings);
  serializer.WriteObject(writer, serializableObject);
  writer.Close();
}


&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; T LoadViaDataContractSerialization&amp;lt;T&amp;gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; filepath)
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; fileStream = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; FileStream(filepath, FileMode.Open);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; reader = XmlDictionaryReader.CreateTextReader(fileStream, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; XmlDictionaryReaderQuotas());
  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; serializer = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DataContractSerializer(&lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(T));
  T serializableObject = (T)serializer.ReadObject(reader, &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;);
  reader.Close();
  fileStream.Close();
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; serializableObject;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;读取方法&#34;&gt;读取方法&lt;/h2&gt;
&lt;p&gt;使用上面两个方法来读取和存储&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Save single object
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;Car bmw = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Car(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;BMW&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; List&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&amp;gt; { &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Left&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Right&amp;#34;&lt;/span&gt; });    &lt;span style=&#34;color:#75715e&#34;&gt;// create object
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;SaveViaDataContractSerialization(bmw, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bmw.xml&amp;#34;&lt;/span&gt;);                       &lt;span style=&#34;color:#75715e&#34;&gt;// save object
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;bmw = &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;;                                                             &lt;span style=&#34;color:#75715e&#34;&gt;// delete object
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;bmw = LoadViaDataContractSerialization&amp;lt;Car&amp;gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bmw.xml&amp;#34;&lt;/span&gt;);                 &lt;span style=&#34;color:#75715e&#34;&gt;// reload object
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;Console.WriteLine(bmw.ToString());                                      &lt;span style=&#34;color:#75715e&#34;&gt;// print object
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;// Save list of objects
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;List&amp;lt;Car&amp;gt; carList = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; List&amp;lt;Car&amp;gt;                                       &lt;span style=&#34;color:#75715e&#34;&gt;// create object list
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;{
&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Car(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Porsche&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;250&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; List&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&amp;gt; { &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Left&amp;#34;&lt;/span&gt; }),
&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Car(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Mercedes&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;150&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; List&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&amp;gt; { &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Front&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Back&amp;#34;&lt;/span&gt; }),
&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Car(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Aston Martin&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;300&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; List&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&amp;gt; { &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Front&amp;#34;&lt;/span&gt; })
};
SaveViaDataContractSerialization(carList, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cars.xml&amp;#34;&lt;/span&gt;);                  &lt;span style=&#34;color:#75715e&#34;&gt;// save object list
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;carList = &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;;                                                         &lt;span style=&#34;color:#75715e&#34;&gt;// delete object list
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;carList = LoadViaDataContractSerialization&amp;lt;List&amp;lt;Car&amp;gt;&amp;gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cars.xml&amp;#34;&lt;/span&gt;);      &lt;span style=&#34;color:#75715e&#34;&gt;// reload object list
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; a &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; carList)                                              &lt;span style=&#34;color:#75715e&#34;&gt;// print object list
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;Console.WriteLine(a.ToString());

Console.ReadLine();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;原视频：&lt;a href=&#34;https://www.youtube.com/watch?v=GzZu3eYDBmM&#34;&gt;https://www.youtube.com/watch?v=GzZu3eYDBmM&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;demo代码：&lt;a href=&#34;https://pastebin.com/mRTmdiK5&#34;&gt;https://pastebin.com/mRTmdiK5&lt;/a&gt;&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
